version: 2.1

executors:
  docker_minio:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    resource_class: large
    docker:
      - image: gcr.io/onec-co/datamon-builder:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data

  # This provides a glibc build
  # TODO(frederic): add builder for alpine and compare
  docker_builder:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    docker:
      - image: gcr.io/onec-co/datamon-builder:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY

commands:
  login_to_google:
    steps:
      - run:
          name: Initialize gcloud SDK
          # GCLOUD_SERVICE_KEY is defined as a global environment in circleci for this context
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

jobs:
  go_lint:
    executor: docker_builder
    steps:
      - checkout
      - restore_cache:
          keys:
           - pkg-cache-{{ checksum "go.sum" }}
           - pkg-cache-
      - run:
          name: Run golang linter
          command: |
            hack/go-generate.sh
            go mod download
            golangci-lint run
      - run:
          name: Lint shell scripts
          command: |
            shellcheck hack/fuse-demo/wrap_application.sh
      - run:
          name: Ensure metrics
          command: |
            go build -o datamon.metrics ./cmd/metrics

  go_test:
    executor: docker_minio
    parallelism: 2
    steps:
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Run golang tests
          command: |
            mkdir -p ~/extra
            mkdir -p /tmp/test-results
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            hack/go-generate.sh
            go mod download
            if [[ ${CIRCLE_NODE_INDEX} -eq 0 ]] ; then
              TESTS=$(go list ./...|grep 'datamon/cmd')
            else
              TESTS=$(go list ./...|grep -v 'datamon/cmd')
            fi
            gotestsum --junitfile /tmp/test-results/go-test-report.xml --format short-with-failures -- -race ${TESTS}
      - save_cache:
          key: pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  fuse_sidecar_test:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          command: |
            gcloud container clusters get-credentials onec-dev
      - run:
          name: Run fuse sidecar demo
          command: |
            make build-datamon-local
            mkdir -p ~/extra
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            DATAMON_GLOBAL_CONFIG=datamon-config-test-sdjfhga ./cmd/datamon/datamon config create
            hack/fuse-demo/demo_coord.sh -b

  build_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Build datamon image (local registry)
          command: |
            make build-datamon
      - run:
          name: Build datamon fuse sidecar image
          command: |
            make build-and-push-fuse-sidecar
      - run:
          name: Build datamon pg sidecar image
          command: |
            make build-and-push-pg-sidecar
      - run:
          name: Build datamon datamover image
          command: |
            make build-and-push-datamover

  build_demo_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: DEMO - Build datamon fuse demo image
          command: |
            make fuse-demo-build-shell
      - run:
          name: DEMO - Build datamon fuse demo sidecar
          command: |
            make fuse-demo-build-sidecar
      - run:
          name: DEMO - Build datamon fuse demo app
          command: |
            make fuse-demo-coord-build-app
      - run:
          name: DEMO - Build datamon fuse demo datamon
          command: |
            make fuse-demo-coord-build-datamon
      - run:
          name: DEMO - Build datamon pg demo app
          command: |
            make pg-demo-coord-build-app

  publish_release:
    executor: docker_builder
    # NOTE:
    # > goreleaser needs access to github API, not only the git repo.
    # > Hence ssh key is not sufficient and GITHUB_TOKEN is required.
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Prepare github release
          command: |
            PATH=${PATH}:${GOPATH}/bin
            opts="--debug"
            # self-installing goreleaser
            curl -sL https://git.io/goreleaser > ${GOPATH}/bin/goreleaser
            chmod u+x ${GOPATH}/bin/goreleaser
            release_notes="./notes/NOTES.${CIRCLE_TAG}.md"
            if [[ -n "${CIRCLE_TAG}" && -f ${RELEASE_NOTES} ]] ; then
              # use custom release notes
              echo "Adding release notes ${release_notes}"
              opts="${opts} --release-notes ${release_notes}"
            else
              # otherwise, leaves standard changelog from goreleaser
              # (picks up all commits)
              echo "No release notes provided: standard changelog applies"
            fi
            if [[ -z "${CIRCLE_TAG}" ]] ; then
              echo "No tag defined for this commit. goleaser will fail [test purpose]"
            fi
            echo "Preparing release ${CIRCLE_TAG}"
            goreleaser ${opts} 2>&1

  push_builder:
    executor: docker_builder
    shell: /bin/bash
    steps:
      - checkout
      - login_to_google
      - run:
          name: build an image to build and test datamon
          command: |
            cd hack/builder
            docker build -t gcr.io/onec-co/datamon-builder:latest .
            docker push gcr.io/onec-co/datamon-builder:latest

workflows:
  version: 2
  build_and_test:
    jobs:
      - go_lint:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - fuse_sidecar_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_demo_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - publish_release:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
            - build_images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

  weekly:
    triggers:
      - schedule:
          cron: "5 4 * * 6"
          filters:
            branches:
              only:
                - master
    jobs:
      - push_builder:
          context: "OC Common"
