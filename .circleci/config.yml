version: 2.1

executors:
  docker_minio:
    # An executor to run S3 compatibility unit tests
    working_directory: ~/project
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
    resource_class: 'medium+'
    docker:
      - image: gcr.io/onec-co/datamon-builder:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data

  base_builder:
    # An executor to run ordinary tasks.
    # TODO(fred): when circleci eventually produces a "latest" tag, switch to that
    working_directory: ~/project
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
    docker:
      - image: cimg/go:1.14

  docker_builder:
    # An executor to run and build: it is based on the base_builder, with some
    # extras to support google cloud.
    working_directory: ~/project
    resource_class: 'medium+' # linter breaks on "small" instances and sometimes even on "medium" ones
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
    docker:
      - image: gcr.io/onec-co/datamon-builder:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY

  fuse_tester:
    # A virtual machine executor to run fuse tests, with privileges n fuse
    working_directory: ~/project
    resource_class: 'medium'
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
      GOROOT: /usr/local/go
      GOPATH: /home/circleci/go
      PATH: /usr/local/go/bin:/home/circleci/go/bin:/home/circleci/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin
    machine:
      image: ubuntu-1604:201903-01

  metrics_tester:
    # An executor to run tests with a local instance of influxdb, to test metrics collection
    working_directory: ~/project
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
    resource_class: 'medium+'
    docker:
      - image: gcr.io/onec-co/datamon-builder:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
      - image: influxdb:1.7-alpine
        environment:
          INFLUXDB_DB: datamon
          INFLUXDB_LOGGING_LEVEL: error
        command:
          - influxd

commands:
  install_base:
    steps:
      - run:
          name: Install packages with gcloud SDK installed locally
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet lsb-release
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-get update -y -qq
            sudo apt-get install -y -qq git build-essential google-cloud-sdk shellcheck zsh

            # install upx version that supports osx binaries (>=3.96)
            UPX_VERSION=3.96
            ARCH=amd64_linux
            curl -sSL -O https://github.com/upx/upx/releases/download/v${UPX_VERSION}/upx-${UPX_VERSION}-${ARCH}.tar.xz
            tar xf upx-${UPX_VERSION}-${ARCH}.tar.xz
            sudo install upx-${UPX_VERSION}-${ARCH}/upx /usr/bin
            rm -rf upx-*

  install_golang:
    steps:
      - run:
          name: install latest golang
          command: |
            export GOPATH=${GOPATH:-/home/circleci/go}
            export GOROOT=${GOROOT:-/usr/local/go}
            ARCH=linux-amd64
            CI_USER=$(id -u)
            pushd /tmp

            git init empty-go && cd empty-go && git remote add upstream	https://go.googlesource.com/go
            GO_VERSION=$(git ls-remote --tags upstream|cut -f2|grep -vE '(weekly)|(rc)|(beta)|(release\.r)'|sed 's/refs\/tags\/go//'|sort -rV|head -1)
            if [[ -z ${GO_VERSION} ]] ; then
              echo "Unable to fetch latest tag from golang repo"
              exit 1
            fi

            wget --no-verbose https://dl.google.com/go/go${GO_VERSION}.${ARCH}.tar.gz
            if [[ $? -ne 0 ]] ; then
              echo "Unable to fetch latest golang binary release from https://dl.google.com"
              exit 1
            fi

            ARTIFACT="go${GO_VERSION}.${ARCH}.tar.gz"
            sudo tar -xf ${ARTIFACT}

            # clean up preinstalled golang on circleci image
            sudo mv ${GOROOT} /usr/local/go.old || true
            sudo mv go ${GOROOT}
            sudo mkdir -p ${GOPATH}/pkg ${GOPATH}/bin
            sudo chown -R ${CI_USER} ${GOPATH}

            rm -f ${ARTIFACT}
            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            go version

            popd

  install_brew:
    steps:
      - run:
          name: install linuxbrew
          command: |
            sudo apt-get install -qq -y build-essential curl file git linuxbrew-wrapper
            # do it twice: a hack to work around https://stackoverflow.com/questions/38410020/homebrew-error-update-report-should-not-be-called-directly
            (brew update < /dev/null)||(brew update < /dev/null)

  install_fuse:
    steps:
      - run:
          name: install fuse
          command: |
            sudo apt-get install -qq -y fuse

  install_machine:
    description: install VM dependencies
    steps:
      - install_base
      - install_fuse
      - install_brew
      - install_golang

  install_kubectl:
    steps:
      - run:
          name: Install prerequisites to drive kubernetes from ci job
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet kubectl
            gcloud container clusters get-credentials ${CLUSTER}

  install_test_tools:
    steps:
      - run:
          name: Install go tools for testing
          environment:
            GO111MODULE: 'on'
          command: |
            make ensure-gotools

  login_to_google:
    steps:
      - run:
          name: Initialize gcloud SDK
          # GCLOUD_SERVICE_KEY is defined as a global environment in circleci for this context
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

  get_cache:
    description: retrieve golang modules cache
    steps:
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.mod" }}
            - go-mod-v1-

  put_cache:
    description: save golang modules cache
    steps:
      - save_cache:
          key: go-mod-v1-{{ checksum "go.mod" }}
          paths:
            - "/home/circleci/go/pkg"

  google_app_credentials:
    steps:
      - run:
          name: Prepare google app credentials
          command: |
            mkdir -p ~/extra
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json

  prepare_tests:
    steps:
      - google_app_credentials
      - run:
          name: Prepare golang tests
          command: |
            mkdir -p /tmp/test-results/cafs /tmp/test-results/noncafs /tmp/test-results/fuse \
                     /tmp/test-coverage/cafs /tmp/test-coverage/noncafs /tmp/test-coverage/fuse \
                     /tmp/test-results/metrics /tmp/test-coverage/metrics
            hack/go-generate.sh
            go mod download

  whitelist_ip:
    steps:
      - run:
          name: Add CircleCI IP to whitelist
          command: |
            set -o errexit
            CIRCLE_CI_IP="$(curl -sSL https://checkip.amazonaws.com)"
            if [[ -z "${CIRCLE_CI_IP}" ]] ; then
              echo "ERROR: could not retrieve external IP"
              exit 1
            fi
            echo "INFO: external IP address for the current job: ${CIRCLE_CI_IP}"

            # Persist the whitelisted IP to be removed later on (actually a CIDR)
            mkdir -p /tmp/whitelisted/ips && touch /tmp/whitelisted/ips/"${CIRCLE_CI_IP}"
            ALREADY="$(gcloud container clusters describe --zone "${GOOGLE_COMPUTE_ZONE}" --format json "${CLUSTER}"|\
            jq -c '{net: .masterAuthorizedNetworksConfig.cidrBlocks}|.net|map(.cidrBlock)|map(select(. == "'"${CIRCLE_CI_IP}"'/32"))|.[]')"
            if [ -n "${ALREADY}" ] ; then
              exit 0
            fi
            typeset -i COUNT
            COUNT=0
            # cluster updates can't occur concurrently. Handle errors and retry during 10s.
            while [[ "${COUNT}" -lt 10 ]] ; do
              if gcloud container clusters update --zone "${GOOGLE_COMPUTE_ZONE}" "${CLUSTER}" --enable-master-authorized-networks --master-authorized-networks "${ALLOWED_NETWORKS},${CIRCLE_CI_IP}/32" ; then
                exit 0
              fi
              COUNT=$((COUNT+1))
              echo "WARN: could not update cluster [${COUNT}] - retrying..."
              sleep 1
            done
            echo "ERROR: could not update cluster to whitelist ${CIRCLE_CI_IP}"
            exit 1
      - persist_to_workspace:
          root: /tmp/whitelisted
          paths:
            - ips


  remove_whitelist_ip:
    steps:
      - attach_workspace:
          at: /tmp/whitelisted
      - run:
          name: Remove previously added CircleCI IP from whitelist
          command: |
            set -o errexit
            CIRCLE_CI_IP="$(curl -sSL https://checkip.amazonaws.com)"
            echo "INFO: external IP address for the current job: ${CIRCLE_CI_IP}"
            IPS_TO_REMOVE="$(find /tmp/whitelisted/ips -type f|awk '{for(i=1;i<NF;i++){printf("\"%s/32\"",$i);if ((NF>1) && (i<NF-1)){printf(",");}}}')"
            PREVIOUS="${ALLOWED_NETWORKS}"
            if [[ -z "${IPS_TO_REMOVE}" ]] ; then
              echo "INFO: no previous IP found: resetting to pre-configured state"
            else
              echo "INFO: previously added IP to be removed: ${IPS_TO_REMOVE}"
              PREVIOUS="$(gcloud container clusters describe --zone "${GOOGLE_COMPUTE_ZONE}" --format json "${CLUSTER}"|\
              jq -c '{net: .masterAuthorizedNetworksConfig.cidrBlocks}|.net|map(.cidrBlock)|map(select(inside('"${IPS_TO_REMOVE}"')))')"
            fi
            echo "INFO: previously authorized networks: ${PREVIOUS}"
            typeset -i COUNT
            COUNT=0
            # cluster updates can't occur concurrently. Handle errors and retry during 10s.
            while [[ "${COUNT}" -lt 10 ]] ; do
              if gcloud container clusters update --zone "${GOOGLE_COMPUTE_ZONE}" "${CLUSTER}" --enable-master-authorized-networks --master-authorized-networks "${PREVIOUS}" ; then
                exit 0
              fi
              COUNT=$((COUNT+1))
              echo "WARN: could not update cluster [${COUNT}] - retrying..."
              sleep 1
            done
            echo "ERROR: could not remove whitelist IPs"
            exit 1

jobs:
  go_lint:
    executor: docker_builder
    steps:
      - checkout
      - get_cache
      - install_test_tools
      - run:
          name: Run golang linter
          command: |
            hack/go-generate.sh
            go mod download
            golangci-lint run --new-from-rev master --timeout 10m
      - run:
          name: Lint shell scripts
          command: |
            make lint-scripts

  go_cross_compile:
    executor: docker_builder
    steps:
      - checkout
      - get_cache
      - run:
          name: Ensure cross-compilation # <- make sure all binaries and release assets will build for linux and darwin
          # TODO(fred): asserts binaries are statically linked and not corrupted
          # TODO(fred): assert macOS binaries work
          command: |
            go mod download
            make cross-compile-binaries

  go_test:
    executor: docker_minio
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
          name: Run golang tests (1)
          command: |
            gotestsum --junitfile /tmp/test-results/noncafs/go-test-report-noncafs.xml --format short-with-failures -- \
              -timeout 15m \
              -race -cover -covermode atomic -coverprofile /tmp/test-coverage/noncafs/c_non_cafs.out \
              $(go list ./...|grep -v cafs)
      - run:
          name: 'Run golang tests (2): cafs'
          command: |
            # cafs tests are memory intensive: best to run them separately
            # cafs tests have a lot of parallel testcases, using -race here would hog CI ressources
            gotestsum --junitfile /tmp/test-results/cafs/go-test-report-cafs.xml --format short-with-failures -- \
              -timeout 15m \
              -parallel 4 -covermode atomic -coverprofile /tmp/test-coverage/cafs/c_cafs_only.out \
              ./pkg/cafs/...
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - noncafs
            - cafs
      - store_test_results:
          path: /tmp/test-results

  go_test_metrics:
    executor: metrics_tester
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
         name: Create influxdb test db
         command: |
           curl http://localhost:8086/query --data-urlencode "q=CREATE DATABASE test"
      - run:
          name: Run golang tests with metrics (1)
          no_output_timeout: 20m
          command: |
            gotestsum --junitfile /tmp/test-results/metrics/go-test-report-metrics.xml --format standard-verbose -- \
              -tags influxdbintegration \
              -timeout 15m \
              -race -cover -covermode atomic -coverprofile /tmp/test-coverage/metrics/c_metrics.out \
              ./cmd/datamon/cmd ./pkg/metrics
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - metrics
      - store_test_results:
          path: /tmp/test-results

  go_test_fuse:
    executor: fuse_tester
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - install_machine
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
          name: Run golang tests in integration environment
          command: |
            gotestsum \
              --junitfile /tmp/test-results/fuse/go-test-report-fuse.xml --format standard-verbose -- \
              -tags fuse_cli,fsintegration -run '(Mount)|(Workshop)' \
              -timeout 15m \
              -covermode atomic -coverprofile /tmp/test-coverage/fuse/c_fuse_integration.out \
              ./pkg/core ./cmd/datamon/cmd
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - fuse
      - store_test_results:
          path: /tmp/test-results

  test_coverage:
    executor: docker_builder
    steps:
      - attach_workspace:
          at: /tmp/test-coverage
      - checkout
      - run:
          name: Coverage tools
          command: |
            go get -u github.com/wadey/gocovmerge
            go get -u github.com/axw/gocov/gocov
            go get -u github.com/matm/gocov-html
      - run:
          name: Merge raw coverage results and produce coverage reports
          command: |
            mkdir -p coverage-results
            # Merge results from multiple test jobs

            collected="$(find /tmp/test-coverage -type f -name \*.out)"
            echo "INFO: collected profiles: ${collected}"
            gocovmerge $collected > merged_coverprofile.out

            # Fully detailed report with go tool cover
            go tool cover -html=merged_coverprofile.out -o coverage-results/coverage_datamon_ci.html

            # Alternative report with gocov
            gocov convert merged_coverprofile.out | gocov-html > coverage-results/coverage_summary_datamon_ci.html
      - store_artifacts:
          path: coverage-results

  fuse_sidecar_test:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - get_cache
      - login_to_google
      - install_kubectl
      - google_app_credentials
      - whitelist_ip
      - run:
          name: Run fuse sidecar demo
          command: |
            make build-datamon-local && sudo install out/datamon /usr/bin
            hack/fuse-demo/demo_coord.sh
      - run:
          when: always
          name: Delete k8s resources for sidecar demo
          command: |
            make clean-fuse-demo

  pg_sidecar_test:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - login_to_google
      - install_kubectl
      - google_app_credentials
      - whitelist_ip
      - run:
          name: Run pg sidecar demo
          command: |
            hack/fuse-demo/demo_pg_coord.sh
      - run:
          when: always
          name: Delete k8s resources for sidecar demo
          command: |
            make clean-pg-demo

  build_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - login_to_google
      - run:
          name: Build docker artifacts
          command: |
            make build-datamon-binaries
            make release-all-docker

  build_demo_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - login_to_google
      - run:
          name: DEMO - Build datamon fuse demo images
          command: |
            make fuse-demo-coord-build-app
      - run:
          name: DEMO - Build datamon pg demo app
          command: |
            make pg-demo-coord-build-app

  publish_release:
    executor: docker_builder
    # NOTE:
    # - acquire GITHUB_TOKEN for onecrobot to push to homebrew-datamon repo
    #
    # > goreleaser needs access to github API, not only the git repo.
    # > Hence ssh key is not sufficient and GITHUB_TOKEN is required.
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - checkout
      - get_cache
      - login_to_google
      - run:
          name: Prepare github release
          command: |
            PATH=${PATH}:${GOPATH}/bin
            opts="--debug"
            # self-installing goreleaser
            curl -sL https://git.io/goreleaser > ${GOPATH}/bin/goreleaser
            chmod u+x ${GOPATH}/bin/goreleaser
            release_notes="./notes/NOTES.${CIRCLE_TAG}.md"
            if [[ -n "${CIRCLE_TAG}" && -f ${RELEASE_NOTES} ]] ; then
              # use custom release notes
              echo "Adding release notes ${release_notes}"
              opts="${opts} --release-notes ${release_notes}"
            else
              # otherwise, keep the standard changelog from goreleaser
              # (picks up all commits)
              echo "No release notes provided: standard changelog applies"
            fi
            if [[ -z "${CIRCLE_TAG}" ]] ; then
              echo "No tag defined for this commit. goleaser will fail [test purpose]"
            fi
            echo "Preparing release ${CIRCLE_TAG}"
            goreleaser ${opts} 2>&1

  push_base:
    executor: base_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - login_to_google
      - run:
          name: push prebuilt images with all dependencies to build sidecars
          command: |
            make build-and-push-sidecar-base
      - run:
          name: push prebuilt golang image to run CI
          # NOTE(fred): this is based on top of the cimg/go:1.14 convenience image.
          # Building it from circleci/golang or pure debian doesn't result in a significantly smaller image.
          command: |
            make build-and-push-datamon-builder

  k8s_remove_whitelist:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - login_to_google
      - remove_whitelist_ip

workflows:
  version: 2
  build_and_test:
    jobs:
      - go_lint:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_cross_compile:
          context: "OC Common"
          requires:
            - go_lint
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test:
          context: "OC Common"
          requires:
            - go_lint
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test_fuse:
          context: "OC Common"
          requires:
            - go_lint
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test_metrics:
          context: "OC Common"
          requires:
            - go_lint
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - test_coverage:
          context: "OC Common"
          requires:
            - go_test
            - go_test_fuse
            - go_test_metrics
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_images:
          context: "OC Common"
          requires:
            - go_lint
            - push_base
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - push_base:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_demo_images:
          context: "OC Common"
          requires:
            - build_images
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - fuse_sidecar_test:
          context: "OC Common"
          requires:
            - build_demo_images
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - pg_sidecar_test:
          context: "OC Common"
          requires:
            - build_demo_images
            - fuse_sidecar_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - k8s_remove_whitelist:
          context: "OC Common"
          requires:
            - fuse_sidecar_test
            - pg_sidecar_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/


      - publish_release:
          context: "OC Common"
          requires:
            - go_test
            - go_test_fuse
            - go_test_metrics
            - build_images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

#  weekly:
#    triggers:
#      - schedule:
#          cron: "5 4 * * 6"
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - push_base:
#          context: "OC Common"
