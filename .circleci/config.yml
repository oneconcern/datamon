version: 2.1

executors:
  docker_minio:
    working_directory: ~/project
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    docker:
      - image: circleci/golang
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data
  docker_builder:
    working_directory: ~/project
    docker:
      - image: circleci/golang

commands:
  install_base:
    steps:
      - run:
          name: Install packages with gcloud SDK installed locally
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet lsb-release
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-get update -y --quiet
            sudo apt-get install -y --quiet git build-essential google-cloud-sdk shellcheck zsh

  install_tools:
    steps:
      - run:
          name: Install go tools for testing
          environment:
            GO111MODULE: 'on'
          command: |
            go get -u gotest.tools/gotestsum@latest
            go get -u github.com/matryer/moq@latest
            go get -u github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            go clean -modcache

  login_to_google:
    steps:
      - run:
          name: Initialize gcloud SDK
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

jobs:
  go_lint:
    executor: docker_minio
    steps:
      - install_base
      - checkout
      - restore_cache:
          keys:
           - pkg-cache-{{ checksum "go.sum" }}
           - pkg-cache-
      - install_tools
      - run:
          name: Run golang linter
          command: |
            hack/go-generate.sh
            go mod download
            golangci-lint run
      - run:
          name: Lint shell scripts
          command: |
            shellcheck hack/fuse-demo/wrap_application.sh
            shellcheck deploy/datamon.sh
      - run:
          name: Ensure metrics
          command: |
            go build -o datamon.metrics ./cmd/metrics

  go_test:
    executor: docker_minio
    parallelism: 4
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - install_tools
      - login_to_google
      - run:
          name: Run golang tests
          command: |
            mkdir -p ~/extra
            mkdir -p /tmp/test-results
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json
            export GOOGLE_APPLICATION_CREDENTIALS=$HOME/extra/appcredentials.json
            hack/go-generate.sh
            go mod download
            gotestsum --junitfile /tmp/test-results/go-test-report.xml ./... -- -race $(go list ./... | circleci tests split)
      - save_cache:
          key: pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  build_images:
    executor: docker_builder
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: Build datamon image (local registry)
          command: |
            make build-datamon
      - run:
          name: Build datamon fuse sidecar image
          command: |
            make build-and-push-fuse-sidecar
      - run:
          name: Build datamon pg sidecar image
          command: |
            make build-and-push-pg-sidecar
      - run:
          name: Build datamon datamover image
          command: |
            make build-and-push-datamover

  build_demo_images:
    executor: docker_builder
    environment:
      GOOGLE_PROJECT_ID: "onec-co"
      GOOGLE_COMPUTE_ZONE: us-west2-c
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - restore_cache:
          keys:
            - pkg-cache-{{ checksum "go.sum" }}
            - pkg-cache-
      - login_to_google
      - run:
          name: DEMO - Build datamon fuse demo image
          command: |
            make fuse-demo-build-shell
      - run:
          name: DEMO - Build datamon fuse demo sidecar
          command: |
            make fuse-demo-build-sidecar
      - run:
          name: DEMO - Build datamon fuse demo app
          command: |
            make fuse-demo-coord-build-app
      - run:
          name: DEMO - Build datamon fuse demo datamon
          command: |
            make fuse-demo-coord-build-datamon
      - run:
          name: DEMO - Build datamon pg demo app
          command: |
            make pg-demo-coord-build-app

#  publish_release:
#    executor: docker_minio
#    steps:
#      - run:
#          name: Dummy step
#          command: |
#            echo "Should reach here before publishing anything with a tagged release"

workflows:
  version: 2
  build_and_test:
    jobs:
      - go_lint:
         context: "OC Common"

      - go_test:
          context: "OC Common"

      - build_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test

      - build_demo_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test

# TODO: on tagged releases, we might want a minimal number of tags only
#      - publish_release:
#          context: "OC Common"
#          requires:
#            - go_lint
#            - go_test
#            - build_images
#          filters:
#            branches:
#              only:
#                - master
#                - v2.*/
#            tags:
#              only: /(^[^v].*)/
