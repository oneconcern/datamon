version: 2.1

executors:
  docker_minio:
    working_directory: ~/project
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
    resource_class: 'medium+'
    docker:
      - image: circleci/golang
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data

  # This provides a glibc build
  # TODO(frederic): add builder for alpine and compare
  docker_builder:
    working_directory: ~/project
    resource_class: 'medium+' # linter breaks on "small" instances and sometimes even on "medium" ones
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
    docker:
      - image: circleci/golang

  fuse_tester:
    working_directory: ~/project
    resource_class: 'medium+'
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
      GOROOT: /usr/local/go
      GOPATH: /go
      PATH: /go/bin:/usr/local/go/bin:/home/circleci/.linuxbrew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/bin
    machine:
      image: ubuntu-1604:201903-01

  metrics_tester:
    working_directory: ~/project
    environment:
      GOOGLE_COMPUTE_ZONE: us-west2-c
    resource_class: 'medium+'
    docker:
      - image: circleci/golang
      - image: minio/minio
        environment:
          MINIO_ACCESS_KEY: access-key
          MINIO_SECRET_KEY: secret-key-thing
          MINIO_BROWSER: "off"
          MINIO_DOMAIN: s3.local
          MINIO_HTTP_TRACE: /tmp/minio.log
        command:
          - server
          - data
      - image: influxdb:1.7-alpine
        environment:
          INFLUXDB_DB: datamon
        command:
          - influxd

commands:
  install_base:
    steps:
      - run:
          name: Install packages with gcloud SDK installed locally
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet lsb-release upx
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
            sudo apt-get update -y -qq
            sudo apt-get install -y -qq git build-essential google-cloud-sdk shellcheck zsh

  install_golang:
    steps:
      - run:
          name: install latest golang
          command: |
            export GOPATH=${GOPATH:-/usr/local/go}
            export GOROOT=${GOROOT:-/go}
            pushd /tmp

            git init empty-go && cd empty-go && git remote add upstream	https://go.googlesource.com/go
            GO_VERSION=$(git ls-remote --tags upstream|cut -f2|grep -vE '(weekly)|(rc)|(beta)|(release\.r)'|sed 's/refs\/tags\/go//'|sort -rV|head -1)
            if [[ -z ${GO_VERSION} ]] ; then
              echo "Unable to fetch latest tag from golang repo"
              exit 1
            fi

            CI_USER=$(id -u)
            wget --no-verbose https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz
            if [[ $? -ne 0 ]] ; then
              echo "Unable to fetch latest golang binary release from https://dl.google.com"
              exit 1
            fi

            CI_USER=$(id -u)
            ARTIFACT="go${GO_VERSION}.linux-amd64.tar.gz"
            sudo tar -xf ${ARTIFACT}

            # clean up preinstalled golang on circleci image
            sudo mv /usr/local/go /usr/local/go.old || true
            sudo mv go /usr/local
            sudo mkdir -p ${GOPATH}/pkg ${GOPATH}/bin
            sudo chown -R ${CI_USER} ${GOPATH}
            rm -f ${ARTIFACT}

            export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
            go version

            popd

  install_brew:
    steps:
      - run:
          name: install linuxbrew
          command: |
            sudo apt-get install -qq -y build-essential curl file git linuxbrew-wrapper
            # do it twice: a hack to work around https://stackoverflow.com/questions/38410020/homebrew-error-update-report-should-not-be-called-directly
            (brew update < /dev/null)||(brew update < /dev/null)

  install_fuse:
    steps:
      - run:
          name: install fuse
          command: |
            sudo apt-get install -qq -y fuse

  install_machine:
    description: install VM dependencies
    steps:
      - install_base
      - install_fuse
      - install_brew
      - install_golang

  install_kubectl:
    steps:
      - run:
          name: Install prerequisites to drive kubernetes from ci job
          command: |
            sudo apt-get update -y --quiet
            sudo apt-get install --quiet kubectl
            gcloud container clusters get-credentials ${CLUSTER}

  install_test_tools:
    steps:
      - run:
          name: Install go tools for testing
          # update tools to latest release but clear the module cache after install
          # to avoid conflicts with the main go dependencies.
          environment:
            GO111MODULE: 'on'
          command: |
            go get -u gotest.tools/gotestsum@latest
            go get -u github.com/matryer/moq@latest
            go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
            go clean -modcache

  login_to_google:
    steps:
      - run:
          name: Initialize gcloud SDK
          # GCLOUD_SERVICE_KEY is defined as a global environment in circleci for this context
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            echo $GCLOUD_SERVICE_KEY | docker login -u _json_key --password-stdin https://gcr.io

  get_cache:
    description: retrieve golang modules cache
    steps:
      - restore_cache:
          keys:
           - pkg-cache-{{ checksum "go.sum" }}
           - pkg-cache-

  put_cache:
    description: save golang modules cache
    steps:
      - save_cache:
          key: pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

  google_app_credentials:
    steps:
      - run:
          name: Prepare google app credentials
          command: |
            mkdir -p ~/extra
            echo $GCLOUD_SERVICE_KEY > ~/extra/appcredentials.json

  prepare_tests:
    steps:
      - google_app_credentials
      - run:
          name: Prepare golang tests
          command: |
            mkdir -p /tmp/test-results/cafs /tmp/test-results/noncafs /tmp/test-results/fuse \
                     /tmp/test-coverage/cafs /tmp/test-coverage/noncafs /tmp/test-coverage/fuse \
                     /tmp/test-results/metrics /tmp/test-coverage/metrics
            hack/go-generate.sh
            go mod download

jobs:
  go_lint:
    executor: docker_builder
    steps:
      - install_base
      - checkout
      - get_cache
      - install_test_tools
      - run:
          name: Run golang linter
          command: |
            hack/go-generate.sh
            go mod download
            golangci-lint run --new-from-rev master --timeout 10m
      - run:
          name: Lint shell scripts
          command: |
            # scans all shells in repo, excluding zsh which is not linted
            find . -name \*.sh|\
            while read -r arg ;do shell=$(head -1q "${arg}");if [[ ! $shell =~ "zsh" ]] ; then echo "${arg}"; fi;done|\
            xargs shellcheck
      - run:
          name: Ensure metrics
          command: |
            go build -o datamon.metrics ./cmd/metrics

  go_test:
    executor: docker_minio
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - install_base
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
          name: Run golang tests (1)
          command: |
            gotestsum --junitfile /tmp/test-results/noncafs/go-test-report-noncafs.xml --format short-with-failures -- \
              -timeout 15m \
              -race -cover -covermode atomic -coverprofile /tmp/test-coverage/noncafs/c_non_cafs.out \
              $(go list ./...|grep -v cafs)
      - run:
          name: 'Run golang tests (2): cafs'
          command: |
            # cafs tests are memory intensive: best to run them separately
            # cafs tests have a lot of parallel testcases, using -race here would hog CI ressources
            gotestsum --junitfile /tmp/test-results/cafs/go-test-report-cafs.xml --format short-with-failures -- \
              -timeout 15m \
              -parallel 4 -covermode atomic -coverprofile /tmp/test-coverage/cafs/c_cafs_only.out \
              ./pkg/cafs/...
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - noncafs
            - cafs
      - store_test_results:
          path: /tmp/test-results

  go_test_metrics:
    executor: metrics_tester
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - install_base
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
         name: Create influxdb test db
         command: |
           curl --get http://localhost:8086/query --data-urlencode "q=CREATE DATABASE test"
      - run:
          name: Run golang tests with metrics (1)
          command: |
            gotestsum --junitfile /tmp/test-results/metrics/go-test-report-metrics.xml --format short-with-failures -- \
              -tags influxdbintegration \
              -timeout 15m \
              -race -cover -covermode atomic -coverprofile /tmp/test-coverage/metrics/c_metrics.out \
              ./cmd/datamon/cmd ./pkg/metrics
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - metrics
      - store_test_results:
          path: /tmp/test-results

  go_test_fuse:
    executor: fuse_tester
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
      GO111MODULE: 'on'
    steps:
      - install_machine
      - checkout
      - get_cache
      - install_test_tools
      - login_to_google
      - prepare_tests
      - run:
          name: Run golang tests in integration environment
          command: |
            gotestsum \
              --junitfile /tmp/test-results/fuse/go-test-report-fuse.xml --format standard-verbose -- \
              -tags fuse_cli,fsintegration -run '(Mount)|(Workshop)' \
              -timeout 15m \
              -covermode atomic -coverprofile /tmp/test-coverage/fuse/c_fuse_integration.out \
              ./pkg/core ./cmd/datamon/cmd
      - put_cache
      - persist_to_workspace:
          root: /tmp/test-coverage
          paths:
            - fuse
      - store_test_results:
          path: /tmp/test-results

  test_coverage:
    executor: docker_builder
    steps:
      - attach_workspace:
          at: /tmp/test-coverage
      - checkout
      - run:
          name: Merge raw coverage results and produce coverage reports
          command: |
            mkdir -p coverage-results
            # Merge results from multiple test jobs
            go get -u github.com/wadey/gocovmerge

            collected="$(find /tmp/test-coverage -type f -name \*.out)"
            echo "INFO: collected profiles: ${collected}"
            gocovmerge $collected > merged_coverprofile.out

            #mkdir -p coverage-results/debug
            #cp ${collected} merged_coverprofile.out coverage-results/debug

            # Fully detailed report with go tool cover
            go tool cover -html=merged_coverprofile.out -o coverage-results/coverage_datamon_ci.html

            # Alternative report with gocov
            go get -u github.com/axw/gocov/gocov
            go get -u github.com/matm/gocov-html
            gocov convert merged_coverprofile.out | gocov-html > coverage-results/coverage_summary_datamon_ci.html
      - store_artifacts:
          path: coverage-results

  fuse_sidecar_test:
    executor: docker_builder
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: /home/circleci/extra/appcredentials.json
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - get_cache
      - login_to_google
      - install_kubectl
      - google_app_credentials
      - run:
          name: Run fuse sidecar demo
          command: |
            make build-datamon-local
            DATAMON_GLOBAL_CONFIG=datamon-config-test-sdjfhga ./cmd/datamon/datamon config create
            hack/fuse-demo/demo_coord.sh -b

  build_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - get_cache
      - login_to_google
      - run:
          name: Build datamon image (local registry)
          command: |
            make build-datamon
      - run:
          name: Build datamon fuse sidecar image
          command: |
            make build-and-push-fuse-sidecar
      - run:
          name: Build datamon pg sidecar image
          command: |
            make build-and-push-pg-sidecar
      - run:
          name: Build datamon datamover image
          command: |
            make build-and-push-datamover

  build_demo_images:
    executor: docker_builder
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - get_cache
      - login_to_google
      - run:
          name: DEMO - Build datamon fuse demo image
          command: |
            make fuse-demo-build-shell
      - run:
          name: DEMO - Build datamon fuse demo sidecar
          command: |
            make fuse-demo-build-sidecar
      - run:
          name: DEMO - Build datamon fuse demo app
          command: |
            make fuse-demo-coord-build-app
      - run:
          name: DEMO - Build datamon fuse demo datamon
          command: |
            make fuse-demo-coord-build-datamon
      - run:
          name: DEMO - Build datamon pg demo app
          command: |
            make pg-demo-coord-build-app

  publish_release:
    executor: docker_builder
    # NOTE:
    # - acquire GITHUB_TOKEN for onecrobot to push to homebrew-datamon repo
    #
    # > goreleaser needs access to github API, not only the git repo.
    # > Hence ssh key is not sufficient and GITHUB_TOKEN is required.
    steps:
      - setup_remote_docker:
          version: 18.09.3
      - install_base
      - checkout
      - get_cache
      - login_to_google
      - run:
          name: Prepare github release
          command: |
            PATH=${PATH}:${GOPATH}/bin
            opts="--debug"
            # self-installing goreleaser
            curl -sL https://git.io/goreleaser > ${GOPATH}/bin/goreleaser
            chmod u+x ${GOPATH}/bin/goreleaser
            release_notes="./notes/NOTES.${CIRCLE_TAG}.md"
            if [[ -n "${CIRCLE_TAG}" && -f ${RELEASE_NOTES} ]] ; then
              # use custom release notes
              echo "Adding release notes ${release_notes}"
              opts="${opts} --release-notes ${release_notes}"
            else
              # otherwise, keep the standard changelog from goreleaser
              # (picks up all commits)
              echo "No release notes provided: standard changelog applies"
            fi
            if [[ -z "${CIRCLE_TAG}" ]] ; then
              echo "No tag defined for this commit. goleaser will fail [test purpose]"
            fi
            echo "Preparing release ${CIRCLE_TAG}"
            goreleaser ${opts} 2>&1

workflows:
  version: 2
  build_and_test:
    jobs:
      - go_lint:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test_fuse:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - go_test_metrics:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - test_coverage:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
            - go_test_fuse
            - go_test_metrics
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - fuse_sidecar_test:
          context: "OC Common"
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - build_demo_images:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/

      - publish_release:
          context: "OC Common"
          requires:
            - go_lint
            - go_test
            - go_test_fuse
            - build_images
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
