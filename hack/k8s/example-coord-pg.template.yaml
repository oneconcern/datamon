---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datamon-pg-local-config-$SIDECAR_TAG
  labels:
    app: datamon-coord-pg-demo
data:
  # the buckets configuration (context) for datamon
  datamon.yaml: |
    config: workshop-config
    context: dev

---
# All postgres sidecars are configured via configmap.
# Notice that it is also possible to use enviromnent variables instead, with SIDECAR_ prefix:
# SIDECAR_GLOBALOPTS_SLEEPINSTEADOFEXIT="true"
# SIDECAR_DATABASE_NAME=db1
apiVersion: v1
kind: ConfigMap
metadata:
  name: $CONFIG_NAME_1
  labels:
    app: datamon-coord-pg-demo
data:
  # - a write only db, created from scratch, then saved
  pgparams.yaml: |
    globalOpts:
      sleepInsteadOfExit: "true"
      coordPoint: /tmp/coord
    database:
      name: db1
      pgPort: "5430"
      owner: dbuser
      # no src: means we want to create this from scratch
      # dest: means we want to save after our work is done
      destRepo: $EXAMPLE_DATAMON_REPO
      destMessage: postgres sidecar coordination example (write only)
      destLabel: $OUTPUT_LABEL [write only example] $SIDECAR_TAG

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $CONFIG_NAME_2
  labels:
    app: datamon-coord-pg-demo
data:
  # - a read/write db, created from existing bundle, then saved
  pgparams.yaml: |
    globalOpts:
      sleepInsteadOfExit: "true"
      coordPoint: /tmp/coord
    database:
      name: db2
      pgPort: "5429"
      srcRepo: $EXAMPLE_DATAMON_REPO
      srcLabel: $INPUT_LABEL_2
      destRepo: $EXAMPLE_DATAMON_REPO
      destMessage: postgres sidecar coordination example (read-write)
      destLabel: $OUTPUT_LABEL [read-write example] $SIDECAR_TAG

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $CONFIG_NAME_3
  labels:
    app: datamon-coord-pg-demo
data:
  # - a read only instance created from existing bundle, then ditched
  pgparams.yaml: |
    globalOpts:
      sleepInsteadOfExit: "true"
      coordPoint: /tmp/coord
    database:
      name: db3
      pgPort: "5428"
      srcRepo: $EXAMPLE_DATAMON_REPO
      srcLabel: $INPUT_LABEL_3
      # no dest: means the upload signal just shuts down the db, and no upload is actually carried out

---
#
# A sample pod specification to enable postgres-enabled sidecar container
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $DEPLOYMENT_NAME
  namespace: $NS
spec:
  selector:
    matchLabels:
      app: datamon-coord-pg-demo
      instance: $SIDECAR_TAG
  replicas: 1
  template:
    metadata:
      labels:
        app: datamon-coord-pg-demo
        instance: $SIDECAR_TAG
    spec:
      # The initContainer retrieves the wrap_application.sh script and makes it
      # available to other appication containers.
      # This wrapper insulates application from the SIGTERM signal (sent by ARGO controller)
      #
      # The wrapper coordinates the interactions with the sidecar (download/spin-up/wind-down/upload)
      initContainers:
      - name: init-application-wrap
        image: "gcr.io/onec-co/datamon-wrapper:$SIDECAR_TAG"
        imagePullPolicy: "$PULL_POLICY"
        command: ["sh", "-c", "cp -a /.scripts/* /scripts"]
        volumeMounts:
        - mountPath: /scripts
          name: application-wrapper

      # command: ["/bin/tini"]
      # args: ["--", "/bin/zsh"]

      containers:
      - name: demo-app
        image: "gcr.io/onec-co/datamon-pg-demo-coord-app:$SIDECAR_TAG"
        imagePullPolicy: "$PULL_POLICY"
        command: ["/scripts/wrap_application.sh"]
        args:
        - "-s"  # this flag is for debug only: it makes the wrapper sleep forever
        - "-c"  # specifies the location for coordination messages
        - "/tmp/coord"
        - "-b"  # specifies the coordination type used (fuse|postgres), each type following a specific coordination scheme
        - "postgres"
        - "-d"  # when postgres is used, specifies the databases to be waited for (space separated list of configured "names" for db server instances)
        - "db1 db2 db3"
        - "--"
        - "mock_application_pg.sh"  # the application to be wrapped and its parameters (none for this mock)
        volumeMounts:
        - mountPath: /scripts
          name: application-wrapper
        - mountPath: /tmp/coord
          name: container-coord

      # A datamon-pg-sidecar container spins up a postgres database retrieved from a datamon bundle
      - name: datamon-sidecar-1
        image: "gcr.io/onec-co/datamon-pg-sidecar:$SIDECAR_TAG"
        imagePullPolicy: "$PULL_POLICY"
        command: ["wrap_datamon_pg.sh"]
        args: []
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /pg_stage
          name: staging-area-1        # volume where the database is mounted
        - mountPath: /tmp/coord
          name: container-coord       # shared volume for coordination beetwen application and sidecar
        - mountPath: /config          # sidecar parameters
          name: pg-config-1
        - mountPath: /home/developer/.datamon2
          name: datamon-config
        - mountPath: /tmp/gac
          name: google-application-credentials # TODO(fred): most likely not to be used
        env:
        - name: SIDECAR_CONFIG
          value: /config/pgparams.yaml
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /tmp/gac/google-application-credentials.json

      # Another database is spun, with a different use case
      - name: datamon-sidecar-2
        image: "gcr.io/onec-co/datamon-pg-sidecar:$SIDECAR_TAG"
        imagePullPolicy: "$PULL_POLICY"
        command: ["wrap_datamon_pg.sh"]
        args: []
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /pg_stage
          name: staging-area-2        # volume where the database is mounted
        - mountPath: /tmp/coord
          name: container-coord       # shared volume for coordination beetwen application and sidecar
        - mountPath: /config          # sidecar parameters
          name: pg-config-2
        - mountPath: /home/developer/.datamon2
          name: datamon-config
        - mountPath: /tmp/gac
          name: google-application-credentials # TODO(fred): most likely not to be used
        env:
        - name: SIDECAR_CONFIG
          value: /config/pgparams.yaml
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /tmp/gac/google-application-credentials.json

      # Another database is spun, with again a different use case
      - name: datamon-sidecar-3
        image: "gcr.io/onec-co/datamon-pg-sidecar:$SIDECAR_TAG"
        imagePullPolicy: "$PULL_POLICY"
        command: ["wrap_datamon_pg.sh"]
        args: []
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /pg_stage
          name: staging-area-3        # volume where the database is mounted
        - mountPath: /tmp/coord
          name: container-coord       # shared volume for coordination beetwen application and sidecar
        - mountPath: /config          # sidecar parameters
          name: pg-config-3
        - mountPath: /home/developer/.datamon2
          name: datamon-config
        - mountPath: /tmp/gac
          name: google-application-credentials # TODO(fred): most likely not to be used
        env:
        - name: SIDECAR_CONFIG
          value: /config/pgparams.yaml
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /tmp/gac/google-application-credentials.json

      volumes:
      - name: container-coord     # <- one single coordination point for all sidecars
        emptyDir: {}
      - name: application-wrapper
        emptyDir: {}
      - name: staging-area-1         # database volume: provision sufficient disk for this operation
        emptyDir: {}
      - name: staging-area-2         # database volume: provision sufficient disk for this operation
        emptyDir: {}
      - name: staging-area-3         # database volume: provision sufficient disk for this operation
        emptyDir: {}
      - name: google-application-credentials
        secret:
          secretName: google-application-credentials
      - name: pg-config-1
        configMap:
          name: $CONFIG_NAME_1
          defaultMode: 0555
      - name: pg-config-2
        configMap:
          name: $CONFIG_NAME_2
          defaultMode: 0555
      - name: pg-config-3
        configMap:
          name: $CONFIG_NAME_3
          defaultMode: 0555
      - name: datamon-config
        configMap:
          name: datamon-pg-local-config-$SIDECAR_TAG
          defaultMode: 0555
